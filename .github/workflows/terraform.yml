name: Infra deploy

on:
  workflow_dispatch:
    inputs:
      destroy:
        type: boolean
        description: Destroy environment?
        required: true
        default: false

      environment:
        description: 'The target environment for deployment (dev, uat, or prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    environment: tfplan

    steps:
    - uses: actions/checkout@v2

    - name: Log in to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v1

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend-config storage_account_name=cgdevuksstterraform -backend-config container_name=tfstate -backend-config key=terraform.tfstate -backend-config resource_group_name=cg-uks-rg -backend-config subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -backend-config tenant_id=${{ secrets.AZURE_TENANT_ID }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

    - name: Calculate destroy arg
      id: destroy_arg
      run: |
        if [ $DESTROY == "true" ]; then
          echo "::set-output name=val::-destroy"
        else
          echo "::set-output name=val:: "
        fi
      env:
        DESTROY: ${{ github.event.inputs.destroy }}

    - name: Terraform Plan
      id: plan
      run: terraform plan $DESTROY -no-color --out=main.tfplan -var-file=environments/$ENVIRONMENT.tfvars
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
        DESTROY: ${{ steps.destroy_arg.outputs.val }}
        ENVIRONMENT: ${{ github.event.inputs.environment }}

    - name: Create the plan summary
      uses: actions/github-script@v6
      if: always()
      id: summary
      env:
        PLAN: '${{ steps.plan.outputs.stdout }}'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Prep the output
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 2. Set the output variable
          const fs = require('fs');
          fs.writeFileSync('summary.md', output);
          core.setOutput('summary', output);

    - name: Write the step summary
      if: always()
      run: cat summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload the plan
      uses: actions/upload-artifact@v3
      with:
        name: tf-plan
        path: main.tfplan

    - name: Publish plan as a status
      if: github.event_name == 'pull_request'
      uses: Sibz/github-status-action@v1.1.6
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        state: ${{ steps.summary.outputs.summary }}
        context: Terraform Plan
        description: Terraform Plan Summary
        sha: ${{ github.event.pull_request.head.sha }}

  apply:
    name: Terraform apply
    needs: [ plan ]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: init
      run: terraform init -backend-config storage_account_name=cgdevuksstterraform -backend-config container_name=tfstate -backend-config key=terraform.tfstate -backend-config resource_group_name=cg-uks-rg -backend-config subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} -backend-config tenant_id=${{ secrets.AZURE_TENANT_ID }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Download the plan
      uses: actions/download-artifact@v3
      with:
        name: tf-plan
        path: .

    - name: Apply the plan
      id: apply
      run: terraform apply -no-color -auto-approve main.tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Create the plan summary
      uses: actions/github-script@v6
      if: always()
      id: summary
      env:
        APPLY: '${{ steps.apply.outputs.stdout }}'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Prep the output
          const output = `#### Terraform Apply üöó\`${{ steps.apply.outcome }}\`

          <details><summary>Show details</summary>

          \`\`\`\n
          ${process.env.APPLY}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 2. Set the output variable
          const fs = require('fs');
          fs.writeFileSync('summary.md', output);
          core.setOutput('summary', output);

    - name: Write the step summary
      if: always()
      run: cat summary.md >> $GITHUB_STEP_SUMMARY

    - name: Publish apply as a status
      if: github.event_name == 'pull_request'
      uses: Sibz/github-status-action@v1.1.6
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        state: ${{ steps.summary.outputs.summary }}
        context: Terraform Plan
        description: Terraform Plan Summary
        sha: ${{ github.event.pull_request.head.sha }}
